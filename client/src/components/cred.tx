qPjHt0idSwMAJrNMUnHtOuHixS6eVLfSsSOuSRSIu4g



import { useEffect, useState, useRef } from "react";
import { FaBicycle } from "react-icons/fa";
import UserNav from "./usernav";
import axios from "axios";
import './bookride.css'
const BookRide = () => {
  const [startAddress, setStartAddress] = useState("");
  const [endAddress, setEndAddress] = useState("");
  const [distance, setDistance] = useState("");
  const [riders, setRiders] = useState([]);
  const [selectedRider, setSelectedRider] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState("paylater");
  const [bankDetails, setBankDetails] = useState({ accountNumber: "", bankName: "" });
  const mapRef = useRef(null);
  const mapInstance = useRef(null);
  const platformRef = useRef(null);
  const apiKey = "qPjHt0idSwMAJrNMUnHtOuHixS6eVLfSsSOuSRSIu4g";
  
  useEffect(() => {
    const loadScripts = async () => {
      try {
        await loadScript("https://js.api.here.com/v3/3.1/mapsjs-core.js");
        await loadScript("https://js.api.here.com/v3/3.1/mapsjs-service.js");
        await loadScript("https://js.api.here.com/v3/3.1/mapsjs-ui.js");
        await loadScript("https://js.api.here.com/v3/3.1/mapsjs-mapevents.js");
        await loadRazorpayScript();
        
        if (window.H && !mapInstance.current) {
          initializeMap();
        }
      } catch (error) {
        console.error("Error loading HERE Maps or Razorpay scripts:", error);
      }
    };

    const fetchRiders = async () => {
      try {
        const response = await fetch("http://localhost:9000/user/viewbikes");
        const data = await response.json();
        const verifiedrider = data.filter(item => item.userId && item.userId.verifieddriver === true);
        setRiders(verifiedrider);
      } catch (error) {
        console.error("Error fetching rider data:", error);
      }
    };

    loadScripts();
    fetchRiders();
  }, []);

  const loadScript = (url) => {
    return new Promise((resolve, reject) => {
      const script = document.createElement("script");
      script.src = url;
      script.async = true;
      script.onload = resolve;
      script.onerror = reject;
      document.body.appendChild(script);
    });
  };

  const loadRazorpayScript = () => {
    return new Promise((resolve, reject) => {
      const script = document.createElement("script");
      script.src = "https://checkout.razorpay.com/v1/checkout.js";
      script.onload = resolve;
      script.onerror = reject;
      document.body.appendChild(script);
    });
  };

  const initializeMap = () => {
    if (!window.H) {
      console.error("HERE Maps SDK not loaded.");
      return;
    }

    platformRef.current = new window.H.service.Platform({ apikey: apiKey });
    const defaultLayers = platformRef.current.createDefaultLayers();

    const map = new window.H.Map(mapRef.current, defaultLayers.vector.normal.map, {
      center: { lat: 10.1632, lng: 76.6413 }, // Default center: Kerala, India
      zoom: 9,
    });

    new window.H.mapevents.Behavior(new window.H.mapevents.MapEvents(map));
    window.H.ui.UI.createDefault(map, defaultLayers);
    window.addEventListener("resize", () => map.getViewPort().resize());
    mapInstance.current = map;
  };

  const getDistanceAndRoute = async () => {
    if (!startAddress || !endAddress) {
      alert("Please enter both start and end locations.");
      return;
    }

    const geocode = async (address) => {
      const url = `https://geocode.search.hereapi.com/v1/geocode?q=${encodeURIComponent(address)}&apiKey=${apiKey}`;
      const response = await fetch(url);
      const data = await response.json();
      if (data.items && data.items.length > 0) {
        return data.items[0].position;
      } else {
        throw new Error("Address not found.");
      }
    };

    try {
      const startCoords = await geocode(startAddress);
      const endCoords = await geocode(endAddress);

      const routeUrl = `https://router.hereapi.com/v8/routes?transportMode=car&origin=${startCoords.lat},${startCoords.lng}&destination=${endCoords.lat},${endCoords.lng}&return=summary,polyline&apiKey=${apiKey}`;
      const routeResponse = await fetch(routeUrl);
      const routeData = await routeResponse.json();

      if (routeData.routes && routeData.routes.length > 0) {
        const distanceInKm = (routeData.routes[0].sections[0].summary.length / 1000).toFixed(2);
        setDistance(`${distanceInKm} km`);

        const polyline = routeData.routes[0].sections[0].polyline;
        displayRoute(polyline);
      } else {
        setDistance("Distance not found.");
      }
    } catch (error) {
      console.error("Error fetching distance and route:", error);
      setDistance("Error retrieving distance.");
    }
  };

  const displayRoute = (encodedPolyline) => {
    if (!mapInstance.current || !platformRef.current) return;

    const lineString = window.H.geo.LineString.fromFlexiblePolyline(encodedPolyline);
    const routePolyline = new window.H.map.Polyline(lineString, {
      style: { strokeColor: "blue", lineWidth: 5 },
    });

    mapInstance.current.addObject(routePolyline);
    mapInstance.current.getViewModel().setLookAtData({ bounds: routePolyline.getBoundingBox() });
  };

  const totalPrice = parseFloat(distance) * 8 || 0;

  const handleRiderSelection = (event) => {
    const rider = riders.find(r => r.vehicleName === event.target.value);
    setSelectedRider(rider);
  };
  
  const handleBooking = async () => {
    if (!selectedRider) {
      alert("Please select a rider before booking.");
      return;
    }

    const bookingDetails = {
      vehicleId: selectedRider._id,
      userId: localStorage.getItem("id"),
      startAddress,
      endAddress,
      totalCost: totalPrice.toFixed(2),
      distance,
      paymentStatus: paymentMethod === "paylater" ? "paylater" : "paid",
      bankDetails: paymentMethod === "paid" ? bankDetails : undefined,
    };

    // If user selects online payment
    if (paymentMethod === "paid") {
      try {
        const orderResponse = await axios.post("http://localhost:9000/user/create-order", {
          amount: totalPrice,
        });

        const orderData = orderResponse.data;

        const options = {
          key: "rzp_test_AQz9oVZHhqMI1R", // Razorpay key_id
          amount: orderData.amount, // amount in paise
          currency: "INR",
          order_id: orderData.id,
          name: "Ride Booking",
          description: `Booking from ${startAddress} to ${endAddress}`,
          image: "https://your-logo-url.com/logo.png", // Optional: Add your company logo
          handler: function (response) {
            alert("Payment Successful");
            // Send payment details to backend to confirm the booking
            axios
              .post("http://localhost:9000/user/bookride", bookingDetails)
              .then((res) => alert(res.data))
              .catch((err) => console.log(err));
          },
          prefill: {
            name: localStorage.getItem("userName"), // Prefill user name if available
            email: localStorage.getItem("userEmail"), // Prefill user email if available
          },
          theme: {
            color: "#ff6600",
          },
        };

        const razorpayInstance = new window.Razorpay(options);
        razorpayInstance.open(); // Open Razorpay payment modal
      } catch (error) {
        console.error("Error creating Razorpay order:", error);
        alert("Error creating payment order.");
      }
    } else {
      // If user selects 'Pay Later', proceed with booking
      axios
        .post("http://localhost:9000/user/bookride", bookingDetails)
        .then((res) => alert(res.data))
        .catch((err) => console.log(err));
    }
  };

  return (
    <>
      <UserNav />
      <div className="body">
        <div className="p-8">
          <h1 className="text-xl font-bold mb-4">Find Distance & View Map</h1>
          <div className="mb-4">
            <input
              type="text"
              placeholder="Enter Starting Location"
              value={startAddress}
              onChange={(e) => setStartAddress(e.target.value)}
              className="border p-2 rounded w-full mb-2"
            />
            <input
              type="text"
              placeholder="Enter Destination Location"
              value={endAddress}
              onChange={(e) => setEndAddress(e.target.value)}
              className="border p-2 rounded w-full mb-2"
            />
            <button
              onClick={getDistanceAndRoute}
              className="bg-blue-500 text-white px-4 py-2 rounded"
            >
              Get Distance & Route
            </button>
          </div>
          {distance && <p className="text-lg font-semibold mt-6">Distance: {distance}</p>}
          <p className="text-lg font-semibold mt-6">Total Price: â‚¹{totalPrice.toFixed(2)}</p>

          {/* Map container */}
          <div
            ref={mapRef}
            style={{
              width: "100%",
              height: "400px",
              borderRadius: "8px",
              marginTop: "20px",
              backgroundRepeat: "no-repeat",
              backgroundSize: "cover",
            }}
          ></div>

          {/* Riders List */}
          <div className="p-10">
            <h1 className="text-xl font-bold mb-4">Select Available Vehicles</h1>

            {riders.length > 0 ? (
              <div>
                {/* Dropdown for selecting a rider */}
                <select className="custom-select" onChange={handleRiderSelection} defaultValue="">
                  <option value="" disabled>Select a rider</option>
                  {riders.map((rider, index) => (
                    <option key={index} value={rider.vehicleName}>
                      {rider.vehicleName} ({rider.model})
                    </option>
                  ))}
                </select>

                {/* Show selected rider details */}
                {selectedRider && (
                  <div className="mt-6 p-6 border rounded-lg shadow-md bg-white">
                    <div className="flex items-center">
                      <FaBicycle className="text-3xl text-blue-500 mr-3" />
                      <div className="flex flex-col">
                        <p className="font-semibold">{selectedRider.vehicleName}</p>
                        <p className="text-sm text-gray-500">{selectedRider.model}</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <p>No riders available.</p>
            )}

            {/* Payment Method Options */}
            <div className="mt-6">
              <h2 className="font-semibold mb-2">Payment Method</h2>
              <label>
                <input
                  type="radio"
                  name="paymentMethod"
                  value="paylater"
                  checked={paymentMethod === "paylater"}
                  onChange={() => setPaymentMethod("paylater")}
                />
                Pay Later
              </label>
              <label className="ml-4">
                <input
                  type="radio"
                  name="paymentMethod"
                  value="paid"
                  checked={paymentMethod === "paid"}
                  onChange={() => setPaymentMethod("paid")}
                />
                Online Payment
              </label>

              {paymentMethod === "paid" && (
                <div className="mt-4">
                  <h3>Enter Bank Details</h3>
                  <input
                    type="text"
                    placeholder="Account Number"
                    value={bankDetails.accountNumber}
                    onChange={(e) =>
                      setBankDetails({ ...bankDetails, accountNumber: e.target.value })
                    }
                    className="border p-2 rounded w-full mb-2"
                  />
                  <input
                    type="text"
                    placeholder="Bank Name"
                    value={bankDetails.bankName}
                    onChange={(e) => setBankDetails({ ...bankDetails, bankName: e.target.value })}
                    className="border p-2 rounded w-full"
                  />
                </div>
              )}
            </div>

            <button
              onClick={handleBooking}
              className="bg-green-500 text-white px-4 py-2 rounded mt-6"
            >
              Book Ride
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default BookRide;